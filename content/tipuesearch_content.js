var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 電腦輔助設計與實習 \n 課程評分: \n 學習心得報告 (60%)  - MS Teams 線上參與，6人一組每三週發表學習心得。 \n w3、w7、w10、w14、w17、w18 \n 學習心得報告主題 : \n w3: 用什麼套件完成  5-bar Linkage Plotter  與  Openduck mini  零組件設計繪圖？  Solvespace ,  Siemens NX ,  Onshape  或其他？各有什麼優缺點？ ( plotter.7z ,  open_duck_mini.7z ) \n w7 ( 2a 採 Youtube 影片簡報 ):  5-bar Linkage Plotter  與  Openduck mini \xa0零組件設計繪製完成之後，如何切割零件? 為何要切割零件？ 如何利用  Webots  進行後續的控制系統設計與動態模擬 (Dynamic Simulation)？( plotter_project.7z ) \n w10:  Webots  是什麼？有什麼特點？ 如何進行場景模擬？ 如何用 Python 進行控制系統設計？ ( Tutorial ) \n w14:  Webots  的模型有沒有辦法用程式方法建立? 有沒有辦法直接從 CAD 套件中轉出  Webots  的場景模型？ \n w17: 如何實作一套  5-bar Linkage Plotter  與  Openduck mini ？( Disney Bipedal Robot ) \n w18: 課程總結 \n 個人與分組網站維護 (40%)  - 每週至少兩次推送與課程進度相關的學習內容與心得。 \n w9 期中自評、w18 期末自評 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Reading', 'text': '英文資料基本閱讀能力自我查驗: \n 認不認得這  2000_words.txt ， 5000_words.txt  呢? \n', 'tags': '', 'url': 'Reading.html'}, {'title': 'CAD', 'text': '參數式零組件繪圖相關參考資料: \n AutoDesk Inventor: \n autodesk_inventor_api.7z \n SolidWorks: \n solidworks_basics.pdf \n Solidworks_ref.7z \n Siemens NX: \n nx_python_examples.pdf \n nxopen_python_ref.7z \n NXOpen_Getting_Started_2017.pdf \n NXOpen_Getting_Started_2019.pdf \n SNAP_Getting_Started_v12.pdf \n Solvespace: \n solvespace-documentation.pdf \n https://solvespace.readthedocs.io/en/latest/   \n https://solvespace.com/tutorial.pl \n https://youtu.be/vBNAIMiomls \n https://arachnoid.com/Computer_Aided_Design/index.html   \n https://news.ycombinator.com/item?id=30625341   \n https://cq.cx/sketchflat.pl \n https://cq.cx/sketchflat-tutorial.p l \n sketchflat-internals.pdf', 'tags': '', 'url': 'CAD.html'}, {'title': 'Design', 'text': 'Math \n 利用 Python + Sympy 解數學相關題目: \n taming math and physics using sympy.pdf \n sympy_documentation.pdf \n Simulation \n modeling and simulation in python.pdf \n bond_graph_modeling.pdf \n Inverse Kinematics: \n inverse_kinematics_solution_of_a_robotic_manipulator_using_python_(two_link).pdf \n inverse_kinematic_analysis_of_robot_manipulators(dissertation_2015).pdf \n Mechanical Advantage Analysis: \n /downloads/mechanical_advantage_analysis.pdf \n Webots: \n Simulation_of_a_Mobile_Manipulator_on_Webots.pdf', 'tags': '', 'url': 'Design.html'}, {'title': 'Plotter', 'text': '設計要求: \n 使用平面五連桿設計一套能夠在  20cm x 20cm  範圍中進行繪圖的畫圖機 \n 驅動: NEMA 17 步進馬達或 STS3215 系列伺服馬達 \n 首先查詢\xa0NEMA 17 步進馬達與STS3215 系列伺服馬達的規格尺寸。 \n 17 NE2: 42.3mmx42.3mmx34mm (from\xa0 https://www.sumfu.com/step/nema17 ) \n STS3215: 45.23mmx24.73mmx29mm (from  FeeTech ) \n 平面五連桿 plotter 自由度如何計算? \n 計算「平面五連桿機構（Five-bar linkage）」的自由度（Degrees of Freedom, DOF）可以使用「Gruebler-Kutzbach 方程式」來處理。 \n 平面機構的自由度 = 3(包含地面的構件數 - 1) - 2(有一個自由度的接頭數) - 有兩個自由度的接頭數 \n 因此平面五連桿的自由度 = 3(5-1) - 2(5) - 0 = 2，因此設計中的 Plotter 有兩個自由度。 \n Plotter 尺寸設計: \n 假設左側的馬達中心座標為 (0, 0), 若希望右側的馬達與左側馬達保持水平位置，則右側馬達的座標可設為 (x1, 0), x1 為第一個系統的設計參數。\xa0 \n 若希望繪圖區 20cmx20cm 正方形的下方距離馬達 30mm，則繪圖區的左下角點座標為 (0, 30)， 而右下角點座標則為 (200, 30)， 左上角點的座標為 (0, 230)，右上角點的座標為 (200, 230)。 \n 因此從左側馬達中心點到繪圖區右上角點的距離為: \\[\\sqrt{(200^2 + 230^2)}\\] =\xa0304.7950 \n 若採四個連桿長度都相同的設計，單一桿長的兩倍必須大於\xa0304.7950 \n 以下尋找桿長的設計上限: \n 針對希望繪圖區域為 20cmx20cm 的平面五軸 plotter，初步設計內容如下，試問已知兩倍連桿長度必須大於 304.795, 請問能不能針對合理設計找出兩倍連桿長度必須小於多少的約束條件? 假設左側的馬達中心座標為 (0, 0), 若希望右側的馬達與左側馬達保持水平位置，則右側馬達的座標可設為 (x1, 0), x1 為第一個系統的設計參數。\xa0 \n 若希望繪圖區 20cmx20cm 正方形的下方距離馬達 30mm，則繪圖區的左下角點座標為 (0, 30)， 而右下角點座標則為 (200, 30)， 左上角點的座標為 (0, 230)，右上角點的座標為 (200, 230)。 因此從左側馬達中心點到繪圖區右上角點的距離為: \\[\\sqrt{(200^2 + 230^2)}\\] \n 針對 \\(x\\_1 = 200\\) mm（左右馬達水平間距）來計算這個五軸平面機構的連桿長度範圍。 一、 左馬達到繪圖區右上角的距離（已知）： \\[ L_{\\text{left→RU}} = \\sqrt{200^2 + 230^2} = \\sqrt{40000 + 52900} = \\sqrt{92900} \\approx \\boxed{304.80 \\text{ mm}} \\] 二、右馬達到繪圖區左上角 \\((0, 230)\\) 的距離： 這是對稱點，對應右馬達控制的最遠點： \\[ L_{\\text{right→LU}} = \\sqrt{(200)^2 + (230)^2} = \\sqrt{92900} \\approx \\boxed{304.80 \\text{ mm}} \\] 因為 \\(x_1 = 200\\)，所以左右兩馬達的極限距離對稱 所以，兩倍連桿長度的下限為： \\[ \\boxed{2L_{\\text{min}} > 304.80 \\text{ mm}} \\] 三、上限推導： 雖然理論上兩連桿長度可以非常長，但為了避免結構不穩、精度低落、繪圖區域外擴太多，我們以合理幾何極限來限制上限。 最大極限是： 當筆頭落在兩馬達直線中點的正上方（最大高度），也就是在 \\((100, y)\\)，最高為繪圖區頂端 \\(y = 230\\)，此時： \\[ L_{\\text{center}} = \\sqrt{(100)^2 + (230)^2} = \\sqrt{10000 + 52900} = \\sqrt{62900} \\approx \\boxed{250.80 \\text{ mm}} \\] 所以每支連桿最大約需 250.80 mm，即： \\[ \\boxed{2L_{\\text{max}} \\le 501.60 \\text{ mm}} \\] 最終結果（針對 \\(x_1 = 200\\) mm）： \\[ \\boxed{ \\text{合理的兩倍連桿長度範圍為：} \\quad \\boxed{ 304.80 < 2L \\le 501.60 \\text{ mm} } } \\] 建議設計值： 接下來選擇 2L 稍微大於 305 mm，並保留些許餘裕（比如 310\\(~\\)350 mm）以兼顧活動性與結構穩定性。 例如： 連桿長度 \\(L = 160\\) mm → 2L = 320 mm\xa0 連桿長度 \\(L = 175\\) mm → 2L = 350 mm\xa0 如此 Plotter 不僅可完整覆蓋繪圖區，又不會讓連桿過長造成搖晃或干涉。 \n 設計考量: \n 連桿長度 考量: \n 連桿過長會造成機構搖晃、擺動放大 輕微的驅動誤差或彎曲都會被放大，導致筆尖失準 選擇 \\(2L \\le 350\\) mm 能兼顧結構剛性與控制穩定性，因為精簡的設計原則是希望連桿盡可能短而剛性強，只要能覆蓋工作區即可。 \n 其次考慮 角度靈活性 （Joint Angle Flexibility） \n 在過短的 \\(2L\\) 情況下，某些筆尖位置需要讓兩個關節角度幾乎伸直或壓扁，會造成奇異點問題（singularity)，控制算法難以計算，且反應變慢、系統容易不穩定。 適度延長 \\(2L\\) 讓關節角度變化更自然、更靈活，例如筆尖在中間時，兩支連桿不是筆直對拉，而有良好的角度展開。 \n 針對 控制精度 （Resolution）的考量: \n 以五軸機構而言，連桿越長時，角度一點點改變就會讓筆尖移動很大距離，如此將會造成繪圖解析度下降（resolution drop）。 若 \\(2L\\) 尺寸選擇遠大於繪圖區，筆尖移動時會有過度放大現象。 因此控制在 \\(2L = 310\\sim350\\) mm 可維持一個平衡的解析度。 \n 針對 物理尺寸與成本 （Practicality）的考量: \n 太長的連桿會導致整機體積變大，同時讓連桿本體與承載結構變重、造價也會提高。 因此兩倍連桿的長度設計選擇接近下限、但略微加大其尺寸範圍（如 310–350 mm）最符合成本效益與設計效率。 \n 最終 Plotter 尺寸設計採連桿長度 160mm 配置如下: \n \n plotter_dimension_design.slvs \n', 'tags': '', 'url': 'Plotter.html'}, {'title': '自由度', 'text': '平面機構的自由度推導: 要解釋  Grübler 公式 （或稱 Kutzbach 公式）如何推導出來，需要從平面機構的運動學基本原理出發，逐步分析構件、自由度和約束的關係。以下是 Grübler 公式的推導過程，針對平面五連桿機構的自由度計算： Grübler 公式 \n 平面機構的自由度公式為： \n \\[ DOF = 3(N - 1) - 2J_1 - J_2 \\] \n 其中： \n \\(DOF\\)：機構的自由度。 \\(N\\)：構件數（包括機架）。 \\(J_1\\)：一自由度關節數（例如轉動軸或滑動軸）。 \\(J_2\\)：二自由度關節數。 推導過程 \n 推導 Grübler 公式的核心是計算機構中所有構件的總自由度，然後減去關節施加的約束，得到淨自由度。 一、單一構件的自由度 \n 在平面運動中，每個獨立的構件（不與其他構件連接）有以下自由度： 兩個平移自由度（沿 x 和 y 軸移動）。 一個旋轉自由度（繞 z 軸旋轉，平面運動不考慮其他旋轉）。 因此，每個構件的自由度為 3。 對於一個機構有 \\(N\\) 個構件（包括機架），總自由度為： \n \\[ 3N \\] 二、固定機架的影響 \n 機構通常有一個固定的構件（機架），其自由度完全被約束（即自由度為 0）。為了計算運動構件的自由度，我們從總構件數中減去機架： \n 機架數量為 1，剩餘的運動構件數為 \\(N - 1\\)。 但是，為了統一計算，我們先考慮所有構件的自由度，然後通過約束來減去自由度。 三、關節的約束 \n 關節（joint）限制了構件之間的相對運動，每個關節會減少一定的自由度： \n 單一自由度關節（例如轉動副或滑動副）：這種關節允許一個自由度（例如只允許旋轉或只允許滑動），因此約束了 2 個自由度（因為每個構件原本有 3 個自由度，關節限制了其中 2 個）。 \n 每個一自由度關節的約束數：\\(3 - 1 = 2\\)。 \n 如果有 \\(J_1\\) 個一自由度關節，總約束為：\\(2J_1\\)。 \n 兩個自由度關節（例如平面關節，允許兩個平移或一個平移加一個旋轉）：這種關節只約束 1 個自由度。 \n 每個二自由度關節的約束數：\\(3 - 2 = 1\\)。 \n 如果有 \\(J_2\\) 個二自由度關節，總約束為：\\(J_2\\)。 \n 四、總自由度計算 \n 將所有構件的自由度減去關節的約束，得到機構的總自由度： \n \\[ DOF = 3N - (2J_1 + J_2) \\] 五、考慮機架的固定 \n 機架作為一個構件，其自由度被完全約束（即 3 個自由度被移除）。因此，我們需要考慮機架的影響： 機架固定相當於減去 1 個構件的自由度，即減去 \\(3 \\cdot 1 = 3\\)。 於是，公式調整為僅考慮運動構件的自由度： \n \\[ DOF = 3(N - 1) - (2J_1 + J_2) \\] \n 這就是 Grübler 公式的最終形式。 六、為什麼要減去機架的自由度？ \n 機架固定後，其 3 個自由度（2 個平移 + 1 個旋轉）被約束。 這相當於從總自由度 \\(3N\\) 中減去機架的 \\(3\\)，因此使用 \\(3(N - 1)\\) 來表示運動構件的自由度。 應用到五連桿機構 \n 對於平面五連桿機構： \n \\(N = 5\\)（4 個運動連桿 + 1 個機架）。 \\(J_1 = 5\\)（5 個轉動副）。 \\(J_2 = 0\\)（無二自由度關節）。 代入公式： \n \\[ DOF = 3(5 - 1) - 2 \\cdot 5 - 0 = 3 \\cdot 4 - 10 = 12 - 10 = 2 \\] \n 自由度為 2，符合五連桿機構的特性。 推導的關鍵假設 \n 一、平面運動：公式假設機構在二維平面內運動，每個構件有 3 個自由度。 二、無冗餘約束：公式假設關節的約束是獨立的。如果機構有冗餘約束（例如平行四邊形結構），自由度可能需要進一步分析。 三、關節類型：公式適用於常見的轉動對、滑動對等，若有特殊關節，需重新計算約束。 特殊情況的考慮 \n 如果機構有冗餘約束（例如某些連桿的運動被重複限制），Grübler 公式可能給出不正確的自由度（例如負值或零），這表示機構可能過約束或需要特殊分析。 \n 對於五連桿機構，若結構為閉環且無冗餘約束，自由度通常為 2，這與實際應用（如繪圖機或機械手臂）一致。 \n', 'tags': '', 'url': '自由度.html'}, {'title': 'AI_plotter', 'text': '\n 已知一個平面五連桿繪圖機購得兩個馬達的中心座標位於 (0,0), (200,0), 四根連桿長度皆為 160mm, 若 plotter 繪圖的座標點為 (x,y), (0,0) 位置上的馬達其轉角從正向 X 軸起算, 以逆時針方向為正, 其轉動角度為 t1, 而(200,0) 位置上的馬達其轉角也是從正向 X 軸起算, 也是以逆時針方向為正, 其轉動角度為 t2, 請利用 Python sympy 推導出以 x, y 為輸入變數, 求四組 t1 與 t2 作為輸出的逆向運動方程式。 \n plotter_sympy_inverse_kinematics.py \n Plotter in Onshape \n \n link1 tip center: -24.436, 158.123, 9 pen center: 96.762, 262.578, -3 link3 tip center: 218.635, 158.911, 15 right motor center: 200, 0, 15 left motor center: 0,0,0 \n 採 matplotlib 模擬四種掃掠 20cmx20cm 正方形邊長的逆向運動學 Solutions: \n cad_demo_sym_formulation.py \n cad_demo_check_sym_sol.py \n Python math 格式: \n def t1_sol1(x, y): return 2 * cmath.atan((320*y - cmath.sqrt(-x**4 - 2*x**2*y**2 + 102400*x**2 - y**4 + 102400*y**2)) / (x**2 + 320*x + y**2))\ndef t2_sol1(x, y): return 2 * cmath.atan((320*y + cmath.sqrt(-x**4 + 800*x**3 - 2*x**2*y**2 - 137600*x**2 + 800*x*y**2 - 8960000*x - y**4 + 22400*y**2 + 2496000000)) / (x**2 - 720*x + y**2 + 104000))\n\n# Solution 2:\ndef t1_sol2(x, y): return 2 * cmath.atan((320*y - cmath.sqrt(-x**4 - 2*x**2*y**2 + 102400*x**2 - y**4 + 102400*y**2)) / (x**2 + 320*x + y**2))\ndef t2_sol2(x, y): return 2 * cmath.atan((320*y - cmath.sqrt(-x**4 + 800*x**3 - 2*x**2*y**2 - 137600*x**2 + 800*x*y**2 - 8960000*x - y**4 + 22400*y**2 + 2496000000)) / (x**2 - 720*x + y**2 + 104000))\n\n# Solution 3:\ndef t1_sol3(x, y): return 2 * cmath.atan((320*y + cmath.sqrt(-x**4 - 2*x**2*y**2 + 102400*x**2 - y**4 + 102400*y**2)) / (x**2 + 320*x + y**2))\ndef t2_sol3(x, y): return 2 * cmath.atan((320*y + cmath.sqrt(-x**4 + 800*x**3 - 2*x**2*y**2 - 137600*x**2 + 800*x*y**2 - 8960000*x - y**4 + 22400*y**2 + 2496000000)) / (x**2 - 720*x + y**2 + 104000))\n\n# Solution 4:\ndef t1_sol4(x, y): return 2 * cmath.atan((320*y + cmath.sqrt(-x**4 - 2*x**2*y**2 + 102400*x**2 - y**4 + 102400*y**2)) / (x**2 + 320*x + y**2))\ndef t2_sol4(x, y): return 2 * cmath.atan((320*y - cmath.sqrt(-x**4 + 800*x**3 - 2*x**2*y**2 - 137600*x**2 + 800*x*y**2 - 8960000*x - y**4 + 22400*y**2 + 2496000000)) / (x**2 - 720*x + y**2 + 104000)) \n \n mathjax 格式: \n JSolution 1 (同上列 math 格式 Solution 2): \\[ t_{1} = 2 \\operatorname{atan}{\\left(\\frac{320 y - \\sqrt{- x^{4} - 2 x^{2} y^{2} + 102400 x^{2} - y^{4} + 102400 y^{2}}}{x^{2} + 320 x + y^{2}} \\right)} \\] \\[ t_{2} = 2 \\operatorname{atan}{\\left(\\frac{320 y - \\sqrt{- x^{4} + 800 x^{3} - 2 x^{2} y^{2} - 137600 x^{2} + 800 x y^{2} - 8960000 x - y^{4} + 22400 y^{2} + 2496000000}}{x^{2} - 720 x + y^{2} + 104000} \\right)} \\] JSolution 2  (同上列 math 格式 Solution 1) : \\[ t_{1} = 2 \\operatorname{atan}{\\left(\\frac{320 y - \\sqrt{- x^{4} - 2 x^{2} y^{2} + 102400 x^{2} - y^{4} + 102400 y^{2}}}{x^{2} + 320 x + y^{2}} \\right)} \\] \\[ t_{2} = 2 \\operatorname{atan}{\\left(\\frac{320 y + \\sqrt{- x^{4} + 800 x^{3} - 2 x^{2} y^{2} - 137600 x^{2} + 800 x y^{2} - 8960000 x - y^{4} + 22400 y^{2} + 2496000000}}{x^{2} - 720 x + y^{2} + 104000} \\right)} \\] JSolution 3  (同上列 math 格式 Solution 4) : \\[ t_{1} = 2 \\operatorname{atan}{\\left(\\frac{320 y + \\sqrt{- x^{4} - 2 x^{2} y^{2} + 102400 x^{2} - y^{4} + 102400 y^{2}}}{x^{2} + 320 x + y^{2}} \\right)} \\] \\[ t_{2} = 2 \\operatorname{atan}{\\left(\\frac{320 y - \\sqrt{- x^{4} + 800 x^{3} - 2 x^{2} y^{2} - 137600 x^{2} + 800 x y^{2} - 8960000 x - y^{4} + 22400 y^{2} + 2496000000}}{x^{2} - 720 x + y^{2} + 104000} \\right)} \\] JSolution 4  (同上列 math 格式 Solution 3) : : \\[ t_{1} = 2 \\operatorname{atan}{\\left(\\frac{320 y + \\sqrt{- x^{4} - 2 x^{2} y^{2} + 102400 x^{2} - y^{4} + 102400 y^{2}}}{x^{2} + 320 x + y^{2}} \\right)} \\] \\[ t_{2} = 2 \\operatorname{atan}{\\left(\\frac{320 y + \\sqrt{- x^{4} + 800 x^{3} - 2 x^{2} y^{2} - 137600 x^{2} + 800 x y^{2} - 8960000 x - y^{4} + 22400 y^{2} + 2496000000}}{x^{2} - 720 x + y^{2} + 104000} \\right)} \\] \n 上列符號式求解(Symbolic Formulation)與圖形法求解進行比較: \n Plotter 到達點 (200, 230) 時的 t1 與 t2 角度（degree）: JSolution 3  (同上列 math 格式 Solution 4) : \n t1 = 66.72° \n t2 = 45.95° \n', 'tags': '', 'url': 'AI_plotter.html'}, {'title': 'P_webots', 'text': '兩種建立剛體的方法 url 給定 OBJ 或 STL 檔案所在相對位置: \n Solid  -  Shape  -  Mesh  - url \n CadShape  - url \n 利用 boundingObject 界定物件碰撞檢測範圍: \n boundingObject USE shape \n SolidReference  設定於 link3 端點，且參照 link4_solid，表示第四旋轉軸既位於 link3，同時也必須位於 link4，讓 Webots 透過此一 closed chain 約束條件，於系統方程式運算時，能夠模擬封閉連桿機構的運動。 \n \n 從\xa0 Plotter in Onshape \xa0以  STL  格式轉出後，利用\xa0 split_stl_to_obj_scale2_w_mtl.py ，以兩倍原始尺寸分割零件為  OBJ  格式後，轉進 Webots 建立第一階段的模擬場景: 僅 link1 轉動:\xa0 plotter_onshape_link1.7z', 'tags': '', 'url': 'P_webots.html'}, {'title': 'Openduck', 'text': 'Open Duck Mini  是一款模組化、開源的雙足仿生機器人平台，專為教育與研究設計，具備高自由度與低成本特性。 \n \n 設計規格： \n \n 使用 12 顆  FeeTech STS3215  伺服馬達（7.4V，19kg·cm 扭矩）+ 2 顆  Miuzei 9g 輔助伺服 ，實現 14 個自由度（雙足腿部 10 DOF，頭頸 4 DOF），支援穩定步態、轉向與精確感測定位。 \n 機身採用 3D 列印（PLA 機身硬性結構/TPU 腳底軟性結構），尺寸約 42cm 高，總重約 1.0–1.3kg。 \n 控制單元為  Raspberry Pi Zero WH ，支援 Wi-Fi/Bluetooth 與模組化感測器擴充（如 IMU、攝影機）。電源為 7.4V 2S（2 顆  18650 電池 ），峰值電流 4–7A。提供  CAD 、韌體與原始碼，採開放授權，零件公開取得，BOM 總成本約$400 美元。 \n', 'tags': '', 'url': 'Openduck.html'}]};